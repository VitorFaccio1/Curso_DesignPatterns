Singleton

	O Singleton é um padrão de projeto criacional que permite a você garantir que uma classe tenha apenas uma instância,
	enquanto provê um ponto de acesso global para essa instância.

Problema
	O padrão Singleton resolve dois problemas de uma só vez, violando o princípio de responsabilidade única.

	1. Garantir que uma classe tenha apenas uma única instância. 
	2. Fornece um ponto de acesso global para aquela instância (inseguras).

Solução
	Todas as implementações do Singleton tem esses dois passos em comum:

	1. Fazer o construtor padrão privado, para prevenir que outros objetos usem o operador new com a classe singleton.
	2. Criar um método estático de criação que age como um construtor. Esse método chama o construtor privado 
		por debaixo dos panos para criar um objeto e o salva em um campo estático. Todas as chamadas seguintes para esse método 
		retornam o objeto em cache.

Analogia com o mundo real
	O governo é um excelente exemplo de um padrão Singleton. Um país pode ter apenas um governo oficial. 

Aplicabilidade
	1. Utilize o padrão Singleton quando uma classe em seu programa deve ter apenas uma instância disponível para todos seus clientes; 
		por exemplo, um objeto de base de dados único compartilhado por diferentes partes do programa.
	2. Utilize o padrão Singleton quando você precisa de um controle mais estrito sobre as variáveis globais.

Prós
	1. Você pode ter certeza que uma classe só terá uma única instância.
	2. Você ganha um ponto de acesso global para aquela instância.
    3. O objeto singleton é inicializado somente quando for pedido pela primeira vez.

Contras
	1. Viola o princípio de responsabilidade única. O padrão resolve dois problemas de uma só vez.
	2. O padrão Singleton pode mascarar um design ruim, por exemplo, quando os componentes do programa sabem muito sobre cada um.
	3.  padrão requer tratamento especial em um ambiente multithreaded para que múltiplas threads não 
		possam criar um objeto singleton várias vezes.
	4.  Pode ser difícil realizar testes unitários do código cliente do Singleton porque muitos frameworks de teste dependem de 
		herança quando produzem objetos simulados. Já que o construtor da classe singleton é privado e sobrescrever métodos 
		estáticos é impossível na maioria das linguagem, você terá que pensar em uma maneira criativa de simular o singleton. 
		Ou apenas não escreva os testes. Ou não use o padrão Singleton.