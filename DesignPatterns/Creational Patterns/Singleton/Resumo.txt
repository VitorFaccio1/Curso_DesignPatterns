Singleton

	O Singleton é um padrão de projeto criacional que permite a você garantir que uma classe tenha apenas uma instância,
	enquanto provê um ponto de acesso global para essa instância.

Problema
	O padrão Singleton resolve dois problemas de uma só vez, violando o princípio de responsabilidade única.

	1. Garantir que uma classe tenha apenas uma única instância. 
	2. Fornece um ponto de acesso global para aquela instância (inseguras).

Solução
	Todas as implementações do Singleton tem esses dois passos em comum:

	1. Fazer o construtor padrão privado, para prevenir que outros objetos usem o operador new com a classe singleton.
	2. Criar um método estático de criação que age como um construtor. Esse método chama o construtor privado 
		por debaixo dos panos para criar um objeto e o salva em um campo estático. Todas as chamadas seguintes para esse método 
		retornam o objeto em cache.

Analogia com o mundo real
	O governo é um excelente exemplo de um padrão Singleton. Um país pode ter apenas um governo oficial. 

Aplicabilidade
	1. Utilize o padrão Singleton quando uma classe em seu programa deve ter apenas uma instância disponível para todos seus clientes; 
		por exemplo, um objeto de base de dados único compartilhado por diferentes partes do programa.
	2. Utilize o padrão Singleton quando você precisa de um controle mais estrito sobre as variáveis globais.

Prós
	1. Você pode ter certeza que uma classe só terá uma única instância.
	2. Você ganha um ponto de acesso global para aquela instância.
    3. O objeto singleton é inicializado somente quando for pedido pela primeira vez.

Contras
	1. Viola o princípio de responsabilidade única. O padrão resolve dois problemas de uma só vez.
	2. O padrão Singleton pode mascarar um design ruim, por exemplo, quando os componentes do programa sabem muito sobre cada um.
	3.  padrão requer tratamento especial em um ambiente multithreaded para que múltiplas threads não 
		possam criar um objeto singleton várias vezes.
	4.  Pode ser difícil realizar testes unitários do código cliente do Singleton porque muitos frameworks de teste dependem de 
		herança quando produzem objetos simulados. Já que o construtor da classe singleton é privado e sobrescrever métodos 
		estáticos é impossível na maioria das linguagem, você terá que pensar em uma maneira criativa de simular o singleton. 
		Ou apenas não escreva os testes. Ou não use o padrão Singleton.

Para entender quando usar Singleton, Scoped e Transient, imagine que você está gerenciando um restaurante e precisa definir como lidar 
com diferentes tipos de objetos (como talheres, pratos ou ingredientes) que os clientes usarão ao longo do dia.

Singleton:
	Pense no Singleton como o cardápio do restaurante. Todos os clientes usam o mesmo cardápio, e ele não muda durante o dia. 
	Então, você só precisa criar o cardápio uma vez e todos podem consultá-lo.

Scoped:
	Scoped é como um prato de comida que você serve a um cliente. Cada cliente recebe um prato separado, 
	e o prato é exclusivo para aquele cliente enquanto ele estiver no restaurante.

	Quando usar: 
		Use Scoped quando você precisa que uma nova instância do objeto seja criada para cada cliente (ou requisição) e dure durante toda 
		a interação (sessão) com esse cliente. É comum em aplicativos web, onde cada cliente (sessão) deve ter seu próprio conjunto de objetos.

Transient:
	Transient é como talheres descartáveis. Cada vez que um cliente chega, você entrega talheres novos, 
	e depois que ele termina, os talheres são descartados.

	Quando usar: 
		Use Transient quando você precisa de um novo objeto a cada vez que ele for solicitado, sem a necessidade de compartilhá-lo ou mantê-lo para uso futuro. 
		Isso é útil para objetos leves ou quando é importante que cada chamada seja independente das outras.

Resumo:
	Singleton: Um único cardápio para todo o restaurante.
	Scoped: Um prato exclusivo para cada cliente, enquanto ele está no restaurante.
	Transient: Talheres descartáveis novos para cada cliente.
